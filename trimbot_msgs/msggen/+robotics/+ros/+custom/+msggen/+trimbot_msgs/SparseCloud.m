classdef SparseCloud < robotics.ros.Message
  %SparseCloud MATLAB implementation of trimbot_msgs/SparseCloud
  %   This class was automatically generated by
  %   robotics.ros.msg.internal.gen.MessageClassGenerator.
  
  %   Copyright 2014-2019 The MathWorks, Inc.
  
  %#ok<*INUSD>
  
  properties (Constant)
    MessageType = 'trimbot_msgs/SparseCloud' % The ROS message type
  end
  
  properties (Constant, Hidden)
    MD5Checksum = '7640fb0e4ff647949630720b2473f458' % The MD5 Checksum of the message definition
  end
  
  properties (Access = protected)
    JavaMessage % The Java message object
  end
  
  properties (Constant, Access = protected)
    StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    TrimbotMsgsFeatureListClass = robotics.ros.msg.internal.MessageFactory.getClassForType('trimbot_msgs/FeatureList') % Dispatch to MATLAB class for message type trimbot_msgs/FeatureList
  end
  
  properties (Dependent)
    Header
    Id
    Proto
    Flist
  end
  
  properties (Access = protected)
    Cache = struct('Header', [], 'Flist', []) % The cache for fast data access
  end
  
  properties (Constant, Hidden)
    PropertyList = {'Flist', 'Header', 'Id', 'Proto'} % List of non-constant message properties
    ROSPropertyList = {'flist', 'header', 'id', 'proto'} % List of non-constant ROS message properties
  end
  
  methods
    function obj = SparseCloud(msg)
      %SparseCloud Construct the message object SparseCloud
      import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
      
      % Support default constructor
      if nargin == 0
        obj.JavaMessage = obj.createNewJavaMessage;
        return;
      end
      
      % Construct appropriate empty array
      if isempty(msg)
        obj = obj.empty(0,1);
        return;
      end
      
      % Make scalar construction fast
      if isscalar(msg)
        % Check for correct input class
        if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
          error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
            char(MessageInfo.getType(msg(1))) ));
        end
        obj.JavaMessage = msg(1);
        return;
      end
      
      % Check that this is a vector of scalar messages. Since this
      % is an object array, use arrayfun to verify.
      if ~all(arrayfun(@isscalar, msg))
        error(message('robotics:ros:message:MessageArraySizeError'));
      end
      
      % Check that all messages in the array have the correct type
      if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
        error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
      end
      
      % Construct array of objects if necessary
      objType = class(obj);
      for i = 1:length(msg)
        obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
      end
    end
    
    function header = get.Header(obj)
      %get.Header Get the value for property Header
      if isempty(obj.Cache.Header)
        obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
      end
      header = obj.Cache.Header;
    end
    
    function set.Header(obj, header)
      %set.Header Set the value for property Header
      validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'SparseCloud', 'Header');
      
      obj.JavaMessage.setHeader(header.getJavaObject);
      
      % Update cache if necessary
      if ~isempty(obj.Cache.Header)
        obj.Cache.Header.setJavaObject(header.getJavaObject);
      end
    end
    
    function id = get.Id(obj)
      %get.Id Get the value for property Id
      id = typecast(int32(obj.JavaMessage.getId), 'uint32');
    end
    
    function set.Id(obj, id)
      %set.Id Set the value for property Id
      validateattributes(id, {'numeric'}, {'nonempty', 'scalar'}, 'SparseCloud', 'Id');
      
      obj.JavaMessage.setId(id);
    end
    
    function proto = get.Proto(obj)
      %get.Proto Get the value for property Proto
      javaArray = obj.JavaMessage.getProto;
      array = obj.readJavaArray(javaArray, 'uint32');
      proto = uint32(array);
    end
    
    function set.Proto(obj, proto)
      %set.Proto Set the value for property Proto
      if ~isvector(proto) && isempty(proto)
        % Allow empty [] input
        proto = uint32.empty(0,1);
      end
      
      validateattributes(proto, {'numeric'}, {'vector'}, 'SparseCloud', 'Proto');
      
      javaArray = obj.JavaMessage.getProto;
      array = obj.writeJavaArray(proto, javaArray, 'uint32');
      obj.JavaMessage.setProto(array);
    end
    
    function flist = get.Flist(obj)
      %get.Flist Get the value for property Flist
      if isempty(obj.Cache.Flist)
        javaArray = obj.JavaMessage.getFlist;
        array = obj.readJavaArray(javaArray, obj.TrimbotMsgsFeatureListClass);
        obj.Cache.Flist = feval(obj.TrimbotMsgsFeatureListClass, array);
      end
      flist = obj.Cache.Flist;
    end
    
    function set.Flist(obj, flist)
      %set.Flist Set the value for property Flist
      if ~isvector(flist) && isempty(flist)
        % Allow empty [] input
        flist = feval([obj.TrimbotMsgsFeatureListClass '.empty'], 0, 1);
      end
      
      validateattributes(flist, {obj.TrimbotMsgsFeatureListClass}, {'vector'}, 'SparseCloud', 'Flist');
      
      javaArray = obj.JavaMessage.getFlist;
      array = obj.writeJavaArray(flist, javaArray, obj.TrimbotMsgsFeatureListClass);
      obj.JavaMessage.setFlist(array);
      
      % Update cache if necessary
      if ~isempty(obj.Cache.Flist)
        obj.Cache.Flist = [];
        obj.Cache.Flist = obj.Flist;
      end
    end
  end
  
  methods (Access = protected)
    function resetCache(obj)
      %resetCache Resets any cached properties
      obj.Cache.Header = [];
      obj.Cache.Flist = [];
    end
    
    function cpObj = copyElement(obj)
      %copyElement Implements deep copy behavior for message
      
      % Call default copy method for shallow copy
      cpObj = copyElement@robotics.ros.Message(obj);
      
      % Clear any existing cached properties
      cpObj.resetCache;
      
      % Create a new Java message object
      cpObj.JavaMessage = obj.createNewJavaMessage;
      
      % Iterate over all primitive properties
      cpObj.Id = obj.Id;
      cpObj.Proto = obj.Proto;
      
      % Recursively copy compound properties
      cpObj.Header = copy(obj.Header);
      cpObj.Flist = copy(obj.Flist);
    end
    
    function reload(obj, strObj)
      %reload Called by loadobj to assign properties
      obj.Id = strObj.Id;
      obj.Proto = strObj.Proto;
      obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
      FlistCell = arrayfun(@(x) feval([obj.TrimbotMsgsFeatureListClass '.loadobj'], x), strObj.Flist, 'UniformOutput', false);
      obj.Flist = vertcat(FlistCell{:});
    end
  end
  
  methods (Access = ?robotics.ros.Message)
    function strObj = saveobj(obj)
      %saveobj Implements saving of message to MAT file
      
      % Return an empty element if object array is empty
      if isempty(obj)
        strObj = struct.empty;
        return
      end
      
      strObj.Id = obj.Id;
      strObj.Proto = obj.Proto;
      strObj.Header = saveobj(obj.Header);
      strObj.Flist = arrayfun(@(x) saveobj(x), obj.Flist);
    end
  end
  
  methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
    function obj = loadobj(strObj)
      %loadobj Implements loading of message from MAT file
      
      % Return an empty object array if the structure element is not defined
      if isempty(strObj)
        obj = robotics.ros.custom.msggen.trimbot_msgs.SparseCloud.empty(0,1);
        return
      end
      
      % Create an empty message object
      obj = robotics.ros.custom.msggen.trimbot_msgs.SparseCloud;
      obj.reload(strObj);
    end
  end
end
