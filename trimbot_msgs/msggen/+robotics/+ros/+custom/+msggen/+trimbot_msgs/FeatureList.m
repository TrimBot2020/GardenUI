classdef FeatureList < robotics.ros.Message
  %FeatureList MATLAB implementation of trimbot_msgs/FeatureList
  %   This class was automatically generated by
  %   robotics.ros.msg.internal.gen.MessageClassGenerator.
  
  %   Copyright 2014-2019 The MathWorks, Inc.
  
  %#ok<*INUSD>
  
  properties (Constant)
    MessageType = 'trimbot_msgs/FeatureList' % The ROS message type
  end
  
  properties (Constant, Hidden)
    MD5Checksum = '419acdc89db811576e484984692265d0' % The MD5 Checksum of the message definition
  end
  
  properties (Access = protected)
    JavaMessage % The Java message object
  end
  
  properties (Dependent)
    Count
    Feature
  end
  
  properties (Constant, Hidden)
    PropertyList = {'Count', 'Feature'} % List of non-constant message properties
    ROSPropertyList = {'count', 'feature'} % List of non-constant ROS message properties
  end
  
  methods
    function obj = FeatureList(msg)
      %FeatureList Construct the message object FeatureList
      import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
      
      % Support default constructor
      if nargin == 0
        obj.JavaMessage = obj.createNewJavaMessage;
        return;
      end
      
      % Construct appropriate empty array
      if isempty(msg)
        obj = obj.empty(0,1);
        return;
      end
      
      % Make scalar construction fast
      if isscalar(msg)
        % Check for correct input class
        if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
          error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
            char(MessageInfo.getType(msg(1))) ));
        end
        obj.JavaMessage = msg(1);
        return;
      end
      
      % Check that this is a vector of scalar messages. Since this
      % is an object array, use arrayfun to verify.
      if ~all(arrayfun(@isscalar, msg))
        error(message('robotics:ros:message:MessageArraySizeError'));
      end
      
      % Check that all messages in the array have the correct type
      if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
        error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
      end
      
      % Construct array of objects if necessary
      objType = class(obj);
      for i = 1:length(msg)
        obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
      end
    end
    
    function count = get.Count(obj)
      %get.Count Get the value for property Count
      javaArray = obj.JavaMessage.getCount;
      array = obj.readJavaArray(javaArray, 'uint32');
      count = uint32(array);
    end
    
    function set.Count(obj, count)
      %set.Count Set the value for property Count
      if ~isvector(count) && isempty(count)
        % Allow empty [] input
        count = uint32.empty(0,1);
      end
      
      validateattributes(count, {'numeric'}, {'vector'}, 'FeatureList', 'Count');
      
      javaArray = obj.JavaMessage.getCount;
      array = obj.writeJavaArray(count, javaArray, 'uint32');
      obj.JavaMessage.setCount(array);
    end
    
    function feature = get.Feature(obj)
      %get.Feature Get the value for property Feature
      javaArray = obj.JavaMessage.getFeature;
      array = obj.readJavaArray(javaArray, 'uint32');
      feature = uint32(array);
    end
    
    function set.Feature(obj, feature)
      %set.Feature Set the value for property Feature
      if ~isvector(feature) && isempty(feature)
        % Allow empty [] input
        feature = uint32.empty(0,1);
      end
      
      validateattributes(feature, {'numeric'}, {'vector'}, 'FeatureList', 'Feature');
      
      javaArray = obj.JavaMessage.getFeature;
      array = obj.writeJavaArray(feature, javaArray, 'uint32');
      obj.JavaMessage.setFeature(array);
    end
  end
  
  methods (Access = protected)
    function cpObj = copyElement(obj)
      %copyElement Implements deep copy behavior for message
      
      % Call default copy method for shallow copy
      cpObj = copyElement@robotics.ros.Message(obj);
      
      % Create a new Java message object
      cpObj.JavaMessage = obj.createNewJavaMessage;
      
      % Iterate over all primitive properties
      cpObj.Count = obj.Count;
      cpObj.Feature = obj.Feature;
    end
    
    function reload(obj, strObj)
      %reload Called by loadobj to assign properties
      obj.Count = strObj.Count;
      obj.Feature = strObj.Feature;
    end
  end
  
  methods (Access = ?robotics.ros.Message)
    function strObj = saveobj(obj)
      %saveobj Implements saving of message to MAT file
      
      % Return an empty element if object array is empty
      if isempty(obj)
        strObj = struct.empty;
        return
      end
      
      strObj.Count = obj.Count;
      strObj.Feature = obj.Feature;
    end
  end
  
  methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
    function obj = loadobj(strObj)
      %loadobj Implements loading of message from MAT file
      
      % Return an empty object array if the structure element is not defined
      if isempty(strObj)
        obj = robotics.ros.custom.msggen.trimbot_msgs.FeatureList.empty(0,1);
        return
      end
      
      % Create an empty message object
      obj = robotics.ros.custom.msggen.trimbot_msgs.FeatureList;
      obj.reload(strObj);
    end
  end
end
