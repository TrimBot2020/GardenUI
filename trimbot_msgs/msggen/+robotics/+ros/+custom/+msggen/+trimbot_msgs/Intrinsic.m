classdef Intrinsic < robotics.ros.Message
  %Intrinsic MATLAB implementation of trimbot_msgs/Intrinsic
  %   This class was automatically generated by
  %   robotics.ros.msg.internal.gen.MessageClassGenerator.
  
  %   Copyright 2014-2019 The MathWorks, Inc.
  
  %#ok<*INUSD>
  
  properties (Constant)
    MessageType = 'trimbot_msgs/Intrinsic' % The ROS message type
  end
  
  properties (Constant, Hidden)
    MD5Checksum = '8122d70851ec7fd4947814392961732a' % The MD5 Checksum of the message definition
  end
  
  properties (Access = protected)
    JavaMessage % The Java message object
  end
  
  properties (Constant, Access = protected)
    StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
  end
  
  properties (Dependent)
    Header
    Id
    Frame
    Albedo
    Shade
  end
  
  properties (Access = protected)
    Cache = struct('Header', []) % The cache for fast data access
  end
  
  properties (Constant, Hidden)
    PropertyList = {'Albedo', 'Frame', 'Header', 'Id', 'Shade'} % List of non-constant message properties
    ROSPropertyList = {'albedo', 'frame', 'header', 'id', 'shade'} % List of non-constant ROS message properties
  end
  
  methods
    function obj = Intrinsic(msg)
      %Intrinsic Construct the message object Intrinsic
      import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
      
      % Support default constructor
      if nargin == 0
        obj.JavaMessage = obj.createNewJavaMessage;
        return;
      end
      
      % Construct appropriate empty array
      if isempty(msg)
        obj = obj.empty(0,1);
        return;
      end
      
      % Make scalar construction fast
      if isscalar(msg)
        % Check for correct input class
        if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
          error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
            char(MessageInfo.getType(msg(1))) ));
        end
        obj.JavaMessage = msg(1);
        return;
      end
      
      % Check that this is a vector of scalar messages. Since this
      % is an object array, use arrayfun to verify.
      if ~all(arrayfun(@isscalar, msg))
        error(message('robotics:ros:message:MessageArraySizeError'));
      end
      
      % Check that all messages in the array have the correct type
      if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
        error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
      end
      
      % Construct array of objects if necessary
      objType = class(obj);
      for i = 1:length(msg)
        obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
      end
    end
    
    function header = get.Header(obj)
      %get.Header Get the value for property Header
      if isempty(obj.Cache.Header)
        obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
      end
      header = obj.Cache.Header;
    end
    
    function set.Header(obj, header)
      %set.Header Set the value for property Header
      validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Intrinsic', 'Header');
      
      obj.JavaMessage.setHeader(header.getJavaObject);
      
      % Update cache if necessary
      if ~isempty(obj.Cache.Header)
        obj.Cache.Header.setJavaObject(header.getJavaObject);
      end
    end
    
    function id = get.Id(obj)
      %get.Id Get the value for property Id
      id = typecast(int32(obj.JavaMessage.getId), 'uint32');
    end
    
    function set.Id(obj, id)
      %set.Id Set the value for property Id
      validateattributes(id, {'numeric'}, {'nonempty', 'scalar'}, 'Intrinsic', 'Id');
      
      obj.JavaMessage.setId(id);
    end
    
    function frame = get.Frame(obj)
      %get.Frame Get the value for property Frame
      frame = typecast(int32(obj.JavaMessage.getFrame), 'uint32');
    end
    
    function set.Frame(obj, frame)
      %set.Frame Set the value for property Frame
      validateattributes(frame, {'numeric'}, {'nonempty', 'scalar'}, 'Intrinsic', 'Frame');
      
      obj.JavaMessage.setFrame(frame);
    end
    
    function albedo = get.Albedo(obj)
      %get.Albedo Get the value for property Albedo
      javaArray = obj.JavaMessage.getAlbedo;
      array = obj.readJavaArray(javaArray, 'single');
      albedo = single(array);
    end
    
    function set.Albedo(obj, albedo)
      %set.Albedo Set the value for property Albedo
      if ~isvector(albedo) && isempty(albedo)
        % Allow empty [] input
        albedo = single.empty(0,1);
      end
      
      validateattributes(albedo, {'numeric'}, {'vector'}, 'Intrinsic', 'Albedo');
      
      javaArray = obj.JavaMessage.getAlbedo;
      array = obj.writeJavaArray(albedo, javaArray, 'single');
      obj.JavaMessage.setAlbedo(array);
    end
    
    function shade = get.Shade(obj)
      %get.Shade Get the value for property Shade
      javaArray = obj.JavaMessage.getShade;
      array = obj.readJavaArray(javaArray, 'single');
      shade = single(array);
    end
    
    function set.Shade(obj, shade)
      %set.Shade Set the value for property Shade
      if ~isvector(shade) && isempty(shade)
        % Allow empty [] input
        shade = single.empty(0,1);
      end
      
      validateattributes(shade, {'numeric'}, {'vector'}, 'Intrinsic', 'Shade');
      
      javaArray = obj.JavaMessage.getShade;
      array = obj.writeJavaArray(shade, javaArray, 'single');
      obj.JavaMessage.setShade(array);
    end
  end
  
  methods (Access = protected)
    function resetCache(obj)
      %resetCache Resets any cached properties
      obj.Cache.Header = [];
    end
    
    function cpObj = copyElement(obj)
      %copyElement Implements deep copy behavior for message
      
      % Call default copy method for shallow copy
      cpObj = copyElement@robotics.ros.Message(obj);
      
      % Clear any existing cached properties
      cpObj.resetCache;
      
      % Create a new Java message object
      cpObj.JavaMessage = obj.createNewJavaMessage;
      
      % Iterate over all primitive properties
      cpObj.Id = obj.Id;
      cpObj.Frame = obj.Frame;
      cpObj.Albedo = obj.Albedo;
      cpObj.Shade = obj.Shade;
      
      % Recursively copy compound properties
      cpObj.Header = copy(obj.Header);
    end
    
    function reload(obj, strObj)
      %reload Called by loadobj to assign properties
      obj.Id = strObj.Id;
      obj.Frame = strObj.Frame;
      obj.Albedo = strObj.Albedo;
      obj.Shade = strObj.Shade;
      obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
    end
  end
  
  methods (Access = ?robotics.ros.Message)
    function strObj = saveobj(obj)
      %saveobj Implements saving of message to MAT file
      
      % Return an empty element if object array is empty
      if isempty(obj)
        strObj = struct.empty;
        return
      end
      
      strObj.Id = obj.Id;
      strObj.Frame = obj.Frame;
      strObj.Albedo = obj.Albedo;
      strObj.Shade = obj.Shade;
      strObj.Header = saveobj(obj.Header);
    end
  end
  
  methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
    function obj = loadobj(strObj)
      %loadobj Implements loading of message from MAT file
      
      % Return an empty object array if the structure element is not defined
      if isempty(strObj)
        obj = robotics.ros.custom.msggen.trimbot_msgs.Intrinsic.empty(0,1);
        return
      end
      
      % Create an empty message object
      obj = robotics.ros.custom.msggen.trimbot_msgs.Intrinsic;
      obj.reload(strObj);
    end
  end
end
