classdef Feature < robotics.ros.Message
  %Feature MATLAB implementation of trimbot_msgs/Feature
  %   This class was automatically generated by
  %   robotics.ros.msg.internal.gen.MessageClassGenerator.
  
  %   Copyright 2014-2019 The MathWorks, Inc.
  
  %#ok<*INUSD>
  
  properties (Constant)
    MessageType = 'trimbot_msgs/Feature' % The ROS message type
  end
  
  properties (Constant, Hidden)
    MD5Checksum = 'eea7111ee6da2a7026d5b56ffe4cb146' % The MD5 Checksum of the message definition
  end
  
  properties (Access = protected)
    JavaMessage % The Java message object
  end
  
  properties (Constant, Access = protected)
    StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
  end
  
  properties (Dependent)
    Header
    Id
    Frame
    Count
    Pos
    Scale
    Orient
    Desc
  end
  
  properties (Access = protected)
    Cache = struct('Header', []) % The cache for fast data access
  end
  
  properties (Constant, Hidden)
    PropertyList = {'Count', 'Desc', 'Frame', 'Header', 'Id', 'Orient', 'Pos', 'Scale'} % List of non-constant message properties
    ROSPropertyList = {'count', 'desc', 'frame', 'header', 'id', 'orient', 'pos', 'scale'} % List of non-constant ROS message properties
  end
  
  methods
    function obj = Feature(msg)
      %Feature Construct the message object Feature
      import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
      
      % Support default constructor
      if nargin == 0
        obj.JavaMessage = obj.createNewJavaMessage;
        return;
      end
      
      % Construct appropriate empty array
      if isempty(msg)
        obj = obj.empty(0,1);
        return;
      end
      
      % Make scalar construction fast
      if isscalar(msg)
        % Check for correct input class
        if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
          error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
            char(MessageInfo.getType(msg(1))) ));
        end
        obj.JavaMessage = msg(1);
        return;
      end
      
      % Check that this is a vector of scalar messages. Since this
      % is an object array, use arrayfun to verify.
      if ~all(arrayfun(@isscalar, msg))
        error(message('robotics:ros:message:MessageArraySizeError'));
      end
      
      % Check that all messages in the array have the correct type
      if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
        error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
      end
      
      % Construct array of objects if necessary
      objType = class(obj);
      for i = 1:length(msg)
        obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
      end
    end
    
    function header = get.Header(obj)
      %get.Header Get the value for property Header
      if isempty(obj.Cache.Header)
        obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
      end
      header = obj.Cache.Header;
    end
    
    function set.Header(obj, header)
      %set.Header Set the value for property Header
      validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Feature', 'Header');
      
      obj.JavaMessage.setHeader(header.getJavaObject);
      
      % Update cache if necessary
      if ~isempty(obj.Cache.Header)
        obj.Cache.Header.setJavaObject(header.getJavaObject);
      end
    end
    
    function id = get.Id(obj)
      %get.Id Get the value for property Id
      id = typecast(int32(obj.JavaMessage.getId), 'uint32');
    end
    
    function set.Id(obj, id)
      %set.Id Set the value for property Id
      validateattributes(id, {'numeric'}, {'nonempty', 'scalar'}, 'Feature', 'Id');
      
      obj.JavaMessage.setId(id);
    end
    
    function frame = get.Frame(obj)
      %get.Frame Get the value for property Frame
      frame = typecast(int32(obj.JavaMessage.getFrame), 'uint32');
    end
    
    function set.Frame(obj, frame)
      %set.Frame Set the value for property Frame
      validateattributes(frame, {'numeric'}, {'nonempty', 'scalar'}, 'Feature', 'Frame');
      
      obj.JavaMessage.setFrame(frame);
    end
    
    function count = get.Count(obj)
      %get.Count Get the value for property Count
      count = typecast(int32(obj.JavaMessage.getCount), 'uint32');
    end
    
    function set.Count(obj, count)
      %set.Count Set the value for property Count
      validateattributes(count, {'numeric'}, {'nonempty', 'scalar'}, 'Feature', 'Count');
      
      obj.JavaMessage.setCount(count);
    end
    
    function pos = get.Pos(obj)
      %get.Pos Get the value for property Pos
      javaArray = obj.JavaMessage.getPos;
      array = obj.readJavaArray(javaArray, 'single');
      pos = single(array);
    end
    
    function set.Pos(obj, pos)
      %set.Pos Set the value for property Pos
      if ~isvector(pos) && isempty(pos)
        % Allow empty [] input
        pos = single.empty(0,1);
      end
      
      validateattributes(pos, {'numeric'}, {'vector'}, 'Feature', 'Pos');
      
      javaArray = obj.JavaMessage.getPos;
      array = obj.writeJavaArray(pos, javaArray, 'single');
      obj.JavaMessage.setPos(array);
    end
    
    function scale = get.Scale(obj)
      %get.Scale Get the value for property Scale
      javaArray = obj.JavaMessage.getScale;
      array = obj.readJavaArray(javaArray, 'single');
      scale = single(array);
    end
    
    function set.Scale(obj, scale)
      %set.Scale Set the value for property Scale
      if ~isvector(scale) && isempty(scale)
        % Allow empty [] input
        scale = single.empty(0,1);
      end
      
      validateattributes(scale, {'numeric'}, {'vector'}, 'Feature', 'Scale');
      
      javaArray = obj.JavaMessage.getScale;
      array = obj.writeJavaArray(scale, javaArray, 'single');
      obj.JavaMessage.setScale(array);
    end
    
    function orient = get.Orient(obj)
      %get.Orient Get the value for property Orient
      javaArray = obj.JavaMessage.getOrient;
      array = obj.readJavaArray(javaArray, 'single');
      orient = single(array);
    end
    
    function set.Orient(obj, orient)
      %set.Orient Set the value for property Orient
      if ~isvector(orient) && isempty(orient)
        % Allow empty [] input
        orient = single.empty(0,1);
      end
      
      validateattributes(orient, {'numeric'}, {'vector'}, 'Feature', 'Orient');
      
      javaArray = obj.JavaMessage.getOrient;
      array = obj.writeJavaArray(orient, javaArray, 'single');
      obj.JavaMessage.setOrient(array);
    end
    
    function desc = get.Desc(obj)
      %get.Desc Get the value for property Desc
      javaArray = obj.JavaMessage.getDesc;
      array = obj.readJavaArray(javaArray, 'single');
      desc = single(array);
    end
    
    function set.Desc(obj, desc)
      %set.Desc Set the value for property Desc
      if ~isvector(desc) && isempty(desc)
        % Allow empty [] input
        desc = single.empty(0,1);
      end
      
      validateattributes(desc, {'numeric'}, {'vector'}, 'Feature', 'Desc');
      
      javaArray = obj.JavaMessage.getDesc;
      array = obj.writeJavaArray(desc, javaArray, 'single');
      obj.JavaMessage.setDesc(array);
    end
  end
  
  methods (Access = protected)
    function resetCache(obj)
      %resetCache Resets any cached properties
      obj.Cache.Header = [];
    end
    
    function cpObj = copyElement(obj)
      %copyElement Implements deep copy behavior for message
      
      % Call default copy method for shallow copy
      cpObj = copyElement@robotics.ros.Message(obj);
      
      % Clear any existing cached properties
      cpObj.resetCache;
      
      % Create a new Java message object
      cpObj.JavaMessage = obj.createNewJavaMessage;
      
      % Iterate over all primitive properties
      cpObj.Id = obj.Id;
      cpObj.Frame = obj.Frame;
      cpObj.Count = obj.Count;
      cpObj.Pos = obj.Pos;
      cpObj.Scale = obj.Scale;
      cpObj.Orient = obj.Orient;
      cpObj.Desc = obj.Desc;
      
      % Recursively copy compound properties
      cpObj.Header = copy(obj.Header);
    end
    
    function reload(obj, strObj)
      %reload Called by loadobj to assign properties
      obj.Id = strObj.Id;
      obj.Frame = strObj.Frame;
      obj.Count = strObj.Count;
      obj.Pos = strObj.Pos;
      obj.Scale = strObj.Scale;
      obj.Orient = strObj.Orient;
      obj.Desc = strObj.Desc;
      obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
    end
  end
  
  methods (Access = ?robotics.ros.Message)
    function strObj = saveobj(obj)
      %saveobj Implements saving of message to MAT file
      
      % Return an empty element if object array is empty
      if isempty(obj)
        strObj = struct.empty;
        return
      end
      
      strObj.Id = obj.Id;
      strObj.Frame = obj.Frame;
      strObj.Count = obj.Count;
      strObj.Pos = obj.Pos;
      strObj.Scale = obj.Scale;
      strObj.Orient = obj.Orient;
      strObj.Desc = obj.Desc;
      strObj.Header = saveobj(obj.Header);
    end
  end
  
  methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
    function obj = loadobj(strObj)
      %loadobj Implements loading of message from MAT file
      
      % Return an empty object array if the structure element is not defined
      if isempty(strObj)
        obj = robotics.ros.custom.msggen.trimbot_msgs.Feature.empty(0,1);
        return
      end
      
      % Create an empty message object
      obj = robotics.ros.custom.msggen.trimbot_msgs.Feature;
      obj.reload(strObj);
    end
  end
end
