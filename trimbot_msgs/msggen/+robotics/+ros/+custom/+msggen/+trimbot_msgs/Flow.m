classdef Flow < robotics.ros.Message
  %Flow MATLAB implementation of trimbot_msgs/Flow
  %   This class was automatically generated by
  %   robotics.ros.msg.internal.gen.MessageClassGenerator.
  
  %   Copyright 2014-2019 The MathWorks, Inc.
  
  %#ok<*INUSD>
  
  properties (Constant)
    MessageType = 'trimbot_msgs/Flow' % The ROS message type
  end
  
  properties (Constant, Hidden)
    MD5Checksum = 'c56dfe8ae9bb78492a1221a680970dbb' % The MD5 Checksum of the message definition
  end
  
  properties (Access = protected)
    JavaMessage % The Java message object
  end
  
  properties (Constant, Access = protected)
    GeometryMsgsPoint32Class = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point32') % Dispatch to MATLAB class for message type geometry_msgs/Point32
    GeometryMsgsPoseClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Pose') % Dispatch to MATLAB class for message type geometry_msgs/Pose
    GeometryMsgsVector3Class = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
    StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
  end
  
  properties (Dependent)
    Header
    Id
    Delta
    Frames
    Pos
    Motion
  end
  
  properties (Access = protected)
    Cache = struct('Header', [], 'Pos', [], 'Motion', [], 'Delta', []) % The cache for fast data access
  end
  
  properties (Constant, Hidden)
    PropertyList = {'Delta', 'Frames', 'Header', 'Id', 'Motion', 'Pos'} % List of non-constant message properties
    ROSPropertyList = {'delta', 'frames', 'header', 'id', 'motion', 'pos'} % List of non-constant ROS message properties
  end
  
  methods
    function obj = Flow(msg)
      %Flow Construct the message object Flow
      import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
      
      % Support default constructor
      if nargin == 0
        obj.JavaMessage = obj.createNewJavaMessage;
        return;
      end
      
      % Construct appropriate empty array
      if isempty(msg)
        obj = obj.empty(0,1);
        return;
      end
      
      % Make scalar construction fast
      if isscalar(msg)
        % Check for correct input class
        if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
          error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
            char(MessageInfo.getType(msg(1))) ));
        end
        obj.JavaMessage = msg(1);
        return;
      end
      
      % Check that this is a vector of scalar messages. Since this
      % is an object array, use arrayfun to verify.
      if ~all(arrayfun(@isscalar, msg))
        error(message('robotics:ros:message:MessageArraySizeError'));
      end
      
      % Check that all messages in the array have the correct type
      if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
        error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
      end
      
      % Construct array of objects if necessary
      objType = class(obj);
      for i = 1:length(msg)
        obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
      end
    end
    
    function header = get.Header(obj)
      %get.Header Get the value for property Header
      if isempty(obj.Cache.Header)
        obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
      end
      header = obj.Cache.Header;
    end
    
    function set.Header(obj, header)
      %set.Header Set the value for property Header
      validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Flow', 'Header');
      
      obj.JavaMessage.setHeader(header.getJavaObject);
      
      % Update cache if necessary
      if ~isempty(obj.Cache.Header)
        obj.Cache.Header.setJavaObject(header.getJavaObject);
      end
    end
    
    function id = get.Id(obj)
      %get.Id Get the value for property Id
      id = typecast(int32(obj.JavaMessage.getId), 'uint32');
    end
    
    function set.Id(obj, id)
      %set.Id Set the value for property Id
      validateattributes(id, {'numeric'}, {'nonempty', 'scalar'}, 'Flow', 'Id');
      
      obj.JavaMessage.setId(id);
    end
    
    function delta = get.Delta(obj)
      %get.Delta Get the value for property Delta
      if isempty(obj.Cache.Delta)
        obj.Cache.Delta = feval(obj.GeometryMsgsPoseClass, obj.JavaMessage.getDelta);
      end
      delta = obj.Cache.Delta;
    end
    
    function set.Delta(obj, delta)
      %set.Delta Set the value for property Delta
      validateattributes(delta, {obj.GeometryMsgsPoseClass}, {'nonempty', 'scalar'}, 'Flow', 'Delta');
      
      obj.JavaMessage.setDelta(delta.getJavaObject);
      
      % Update cache if necessary
      if ~isempty(obj.Cache.Delta)
        obj.Cache.Delta.setJavaObject(delta.getJavaObject);
      end
    end
    
    function frames = get.Frames(obj)
      %get.Frames Get the value for property Frames
      javaArray = obj.JavaMessage.getFrames;
      array = obj.readJavaArray(javaArray, 'uint32');
      frames = uint32(array);
    end
    
    function set.Frames(obj, frames)
      %set.Frames Set the value for property Frames
      validateattributes(frames, {'numeric'}, {'vector', 'numel', 4}, 'Flow', 'Frames');
      
      javaArray = obj.JavaMessage.getFrames;
      array = obj.writeJavaArray(frames, javaArray, 'uint32');
      obj.JavaMessage.setFrames(array);
    end
    
    function pos = get.Pos(obj)
      %get.Pos Get the value for property Pos
      if isempty(obj.Cache.Pos)
        javaArray = obj.JavaMessage.getPos;
        array = obj.readJavaArray(javaArray, obj.GeometryMsgsPoint32Class);
        obj.Cache.Pos = feval(obj.GeometryMsgsPoint32Class, array);
      end
      pos = obj.Cache.Pos;
    end
    
    function set.Pos(obj, pos)
      %set.Pos Set the value for property Pos
      if ~isvector(pos) && isempty(pos)
        % Allow empty [] input
        pos = feval([obj.GeometryMsgsPoint32Class '.empty'], 0, 1);
      end
      
      validateattributes(pos, {obj.GeometryMsgsPoint32Class}, {'vector'}, 'Flow', 'Pos');
      
      javaArray = obj.JavaMessage.getPos;
      array = obj.writeJavaArray(pos, javaArray, obj.GeometryMsgsPoint32Class);
      obj.JavaMessage.setPos(array);
      
      % Update cache if necessary
      if ~isempty(obj.Cache.Pos)
        obj.Cache.Pos = [];
        obj.Cache.Pos = obj.Pos;
      end
    end
    
    function motion = get.Motion(obj)
      %get.Motion Get the value for property Motion
      if isempty(obj.Cache.Motion)
        javaArray = obj.JavaMessage.getMotion;
        array = obj.readJavaArray(javaArray, obj.GeometryMsgsVector3Class);
        obj.Cache.Motion = feval(obj.GeometryMsgsVector3Class, array);
      end
      motion = obj.Cache.Motion;
    end
    
    function set.Motion(obj, motion)
      %set.Motion Set the value for property Motion
      if ~isvector(motion) && isempty(motion)
        % Allow empty [] input
        motion = feval([obj.GeometryMsgsVector3Class '.empty'], 0, 1);
      end
      
      validateattributes(motion, {obj.GeometryMsgsVector3Class}, {'vector'}, 'Flow', 'Motion');
      
      javaArray = obj.JavaMessage.getMotion;
      array = obj.writeJavaArray(motion, javaArray, obj.GeometryMsgsVector3Class);
      obj.JavaMessage.setMotion(array);
      
      % Update cache if necessary
      if ~isempty(obj.Cache.Motion)
        obj.Cache.Motion = [];
        obj.Cache.Motion = obj.Motion;
      end
    end
  end
  
  methods (Access = protected)
    function resetCache(obj)
      %resetCache Resets any cached properties
      obj.Cache.Header = [];
      obj.Cache.Pos = [];
      obj.Cache.Motion = [];
      obj.Cache.Delta = [];
    end
    
    function cpObj = copyElement(obj)
      %copyElement Implements deep copy behavior for message
      
      % Call default copy method for shallow copy
      cpObj = copyElement@robotics.ros.Message(obj);
      
      % Clear any existing cached properties
      cpObj.resetCache;
      
      % Create a new Java message object
      cpObj.JavaMessage = obj.createNewJavaMessage;
      
      % Iterate over all primitive properties
      cpObj.Id = obj.Id;
      cpObj.Frames = obj.Frames;
      
      % Recursively copy compound properties
      cpObj.Header = copy(obj.Header);
      cpObj.Delta = copy(obj.Delta);
      cpObj.Pos = copy(obj.Pos);
      cpObj.Motion = copy(obj.Motion);
    end
    
    function reload(obj, strObj)
      %reload Called by loadobj to assign properties
      obj.Id = strObj.Id;
      obj.Frames = strObj.Frames;
      obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
      obj.Delta = feval([obj.GeometryMsgsPoseClass '.loadobj'], strObj.Delta);
      PosCell = arrayfun(@(x) feval([obj.GeometryMsgsPoint32Class '.loadobj'], x), strObj.Pos, 'UniformOutput', false);
      obj.Pos = vertcat(PosCell{:});
      MotionCell = arrayfun(@(x) feval([obj.GeometryMsgsVector3Class '.loadobj'], x), strObj.Motion, 'UniformOutput', false);
      obj.Motion = vertcat(MotionCell{:});
    end
  end
  
  methods (Access = ?robotics.ros.Message)
    function strObj = saveobj(obj)
      %saveobj Implements saving of message to MAT file
      
      % Return an empty element if object array is empty
      if isempty(obj)
        strObj = struct.empty;
        return
      end
      
      strObj.Id = obj.Id;
      strObj.Frames = obj.Frames;
      strObj.Header = saveobj(obj.Header);
      strObj.Delta = saveobj(obj.Delta);
      strObj.Pos = arrayfun(@(x) saveobj(x), obj.Pos);
      strObj.Motion = arrayfun(@(x) saveobj(x), obj.Motion);
    end
  end
  
  methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
    function obj = loadobj(strObj)
      %loadobj Implements loading of message from MAT file
      
      % Return an empty object array if the structure element is not defined
      if isempty(strObj)
        obj = robotics.ros.custom.msggen.trimbot_msgs.Flow.empty(0,1);
        return
      end
      
      % Create an empty message object
      obj = robotics.ros.custom.msggen.trimbot_msgs.Flow;
      obj.reload(strObj);
    end
  end
end
