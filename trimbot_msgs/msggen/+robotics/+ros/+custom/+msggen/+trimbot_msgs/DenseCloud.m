classdef DenseCloud < robotics.ros.Message
  %DenseCloud MATLAB implementation of trimbot_msgs/DenseCloud
  %   This class was automatically generated by
  %   robotics.ros.msg.internal.gen.MessageClassGenerator.
  
  %   Copyright 2014-2019 The MathWorks, Inc.
  
  %#ok<*INUSD>
  
  properties (Constant)
    MessageType = 'trimbot_msgs/DenseCloud' % The ROS message type
  end
  
  properties (Constant, Hidden)
    MD5Checksum = '5154c11d42d4152eb2c7fbd74cf1f0f9' % The MD5 Checksum of the message definition
  end
  
  properties (Access = protected)
    JavaMessage % The Java message object
  end
  
  properties (Constant, Access = protected)
    StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
  end
  
  properties (Dependent)
    Header
    Id
    Source
    From
    Covf
    Covp
  end
  
  properties (Access = protected)
    Cache = struct('Header', []) % The cache for fast data access
  end
  
  properties (Constant, Hidden)
    PropertyList = {'Covf', 'Covp', 'From', 'Header', 'Id', 'Source'} % List of non-constant message properties
    ROSPropertyList = {'covf', 'covp', 'from', 'header', 'id', 'source'} % List of non-constant ROS message properties
  end
  
  methods
    function obj = DenseCloud(msg)
      %DenseCloud Construct the message object DenseCloud
      import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
      
      % Support default constructor
      if nargin == 0
        obj.JavaMessage = obj.createNewJavaMessage;
        return;
      end
      
      % Construct appropriate empty array
      if isempty(msg)
        obj = obj.empty(0,1);
        return;
      end
      
      % Make scalar construction fast
      if isscalar(msg)
        % Check for correct input class
        if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
          error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
            char(MessageInfo.getType(msg(1))) ));
        end
        obj.JavaMessage = msg(1);
        return;
      end
      
      % Check that this is a vector of scalar messages. Since this
      % is an object array, use arrayfun to verify.
      if ~all(arrayfun(@isscalar, msg))
        error(message('robotics:ros:message:MessageArraySizeError'));
      end
      
      % Check that all messages in the array have the correct type
      if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
        error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
      end
      
      % Construct array of objects if necessary
      objType = class(obj);
      for i = 1:length(msg)
        obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
      end
    end
    
    function header = get.Header(obj)
      %get.Header Get the value for property Header
      if isempty(obj.Cache.Header)
        obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
      end
      header = obj.Cache.Header;
    end
    
    function set.Header(obj, header)
      %set.Header Set the value for property Header
      validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'DenseCloud', 'Header');
      
      obj.JavaMessage.setHeader(header.getJavaObject);
      
      % Update cache if necessary
      if ~isempty(obj.Cache.Header)
        obj.Cache.Header.setJavaObject(header.getJavaObject);
      end
    end
    
    function id = get.Id(obj)
      %get.Id Get the value for property Id
      id = typecast(int32(obj.JavaMessage.getId), 'uint32');
    end
    
    function set.Id(obj, id)
      %set.Id Set the value for property Id
      validateattributes(id, {'numeric'}, {'nonempty', 'scalar'}, 'DenseCloud', 'Id');
      
      obj.JavaMessage.setId(id);
    end
    
    function source = get.Source(obj)
      %get.Source Get the value for property Source
      source = typecast(int32(obj.JavaMessage.getSource), 'uint32');
    end
    
    function set.Source(obj, source)
      %set.Source Set the value for property Source
      validateattributes(source, {'numeric'}, {'nonempty', 'scalar'}, 'DenseCloud', 'Source');
      
      obj.JavaMessage.setSource(source);
    end
    
    function from = get.From(obj)
      %get.From Get the value for property From
      from = typecast(int32(obj.JavaMessage.getFrom), 'uint32');
    end
    
    function set.From(obj, from)
      %set.From Set the value for property From
      validateattributes(from, {'numeric'}, {'nonempty', 'scalar'}, 'DenseCloud', 'From');
      
      obj.JavaMessage.setFrom(from);
    end
    
    function covf = get.Covf(obj)
      %get.Covf Get the value for property Covf
      covf = char(obj.JavaMessage.getCovf);
    end
    
    function set.Covf(obj, covf)
      %set.Covf Set the value for property Covf
      covf = convertStringsToChars(covf);
      
      validateattributes(covf, {'char', 'string'}, {}, 'DenseCloud', 'Covf');
      
      obj.JavaMessage.setCovf(covf);
    end
    
    function covp = get.Covp(obj)
      %get.Covp Get the value for property Covp
      javaArray = obj.JavaMessage.getCovp;
      array = obj.readJavaArray(javaArray, 'single');
      covp = single(array);
    end
    
    function set.Covp(obj, covp)
      %set.Covp Set the value for property Covp
      if ~isvector(covp) && isempty(covp)
        % Allow empty [] input
        covp = single.empty(0,1);
      end
      
      validateattributes(covp, {'numeric'}, {'vector'}, 'DenseCloud', 'Covp');
      
      javaArray = obj.JavaMessage.getCovp;
      array = obj.writeJavaArray(covp, javaArray, 'single');
      obj.JavaMessage.setCovp(array);
    end
  end
  
  methods (Access = protected)
    function resetCache(obj)
      %resetCache Resets any cached properties
      obj.Cache.Header = [];
    end
    
    function cpObj = copyElement(obj)
      %copyElement Implements deep copy behavior for message
      
      % Call default copy method for shallow copy
      cpObj = copyElement@robotics.ros.Message(obj);
      
      % Clear any existing cached properties
      cpObj.resetCache;
      
      % Create a new Java message object
      cpObj.JavaMessage = obj.createNewJavaMessage;
      
      % Iterate over all primitive properties
      cpObj.Id = obj.Id;
      cpObj.Source = obj.Source;
      cpObj.From = obj.From;
      cpObj.Covf = obj.Covf;
      cpObj.Covp = obj.Covp;
      
      % Recursively copy compound properties
      cpObj.Header = copy(obj.Header);
    end
    
    function reload(obj, strObj)
      %reload Called by loadobj to assign properties
      obj.Id = strObj.Id;
      obj.Source = strObj.Source;
      obj.From = strObj.From;
      obj.Covf = strObj.Covf;
      obj.Covp = strObj.Covp;
      obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
    end
  end
  
  methods (Access = ?robotics.ros.Message)
    function strObj = saveobj(obj)
      %saveobj Implements saving of message to MAT file
      
      % Return an empty element if object array is empty
      if isempty(obj)
        strObj = struct.empty;
        return
      end
      
      strObj.Id = obj.Id;
      strObj.Source = obj.Source;
      strObj.From = obj.From;
      strObj.Covf = obj.Covf;
      strObj.Covp = obj.Covp;
      strObj.Header = saveobj(obj.Header);
    end
  end
  
  methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
    function obj = loadobj(strObj)
      %loadobj Implements loading of message from MAT file
      
      % Return an empty object array if the structure element is not defined
      if isempty(strObj)
        obj = robotics.ros.custom.msggen.trimbot_msgs.DenseCloud.empty(0,1);
        return
      end
      
      % Create an empty message object
      obj = robotics.ros.custom.msggen.trimbot_msgs.DenseCloud;
      obj.reload(strObj);
    end
  end
end
