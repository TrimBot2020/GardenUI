classdef MapObject < robotics.ros.Message
  %MapObject MATLAB implementation of trimbot_msgs/MapObject
  %   This class was automatically generated by
  %   robotics.ros.msg.internal.gen.MessageClassGenerator.
  
  %   Copyright 2014-2019 The MathWorks, Inc.
  
  %#ok<*INUSD>
  
  properties (Constant)
    MessageType = 'trimbot_msgs/MapObject' % The ROS message type
  end
  
  properties (Constant, Hidden)
    MD5Checksum = '346df6308751d4eab5d17cd3da319f9c' % The MD5 Checksum of the message definition
  end
  
  properties (Access = protected)
    JavaMessage % The Java message object
  end
  
  properties (Constant, Access = protected)
    GeometryMsgsPoseClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Pose') % Dispatch to MATLAB class for message type geometry_msgs/Pose
    GeometryMsgsVector3Class = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
    ShapeMsgsMeshClass = robotics.ros.msg.internal.MessageFactory.getClassForType('shape_msgs/Mesh') % Dispatch to MATLAB class for message type shape_msgs/Mesh
    StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
  end
  
  properties (Dependent)
    Header
    Id
    Label
    Shape
    Pose
    Scale
    Geometry
    Parent
    Param
    Child
  end
  
  properties (Access = protected)
    Cache = struct('Header', [], 'Pose', [], 'Scale', [], 'Geometry', []) % The cache for fast data access
  end
  
  properties (Constant, Hidden)
    PropertyList = {'Child', 'Geometry', 'Header', 'Id', 'Label', 'Param', 'Parent', 'Pose', 'Scale', 'Shape'} % List of non-constant message properties
    ROSPropertyList = {'child', 'geometry', 'header', 'id', 'label', 'param', 'parent', 'pose', 'scale', 'shape'} % List of non-constant ROS message properties
  end
  
  methods
    function obj = MapObject(msg)
      %MapObject Construct the message object MapObject
      import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
      
      % Support default constructor
      if nargin == 0
        obj.JavaMessage = obj.createNewJavaMessage;
        return;
      end
      
      % Construct appropriate empty array
      if isempty(msg)
        obj = obj.empty(0,1);
        return;
      end
      
      % Make scalar construction fast
      if isscalar(msg)
        % Check for correct input class
        if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
          error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
            char(MessageInfo.getType(msg(1))) ));
        end
        obj.JavaMessage = msg(1);
        return;
      end
      
      % Check that this is a vector of scalar messages. Since this
      % is an object array, use arrayfun to verify.
      if ~all(arrayfun(@isscalar, msg))
        error(message('robotics:ros:message:MessageArraySizeError'));
      end
      
      % Check that all messages in the array have the correct type
      if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
        error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
      end
      
      % Construct array of objects if necessary
      objType = class(obj);
      for i = 1:length(msg)
        obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
      end
    end
    
    function header = get.Header(obj)
      %get.Header Get the value for property Header
      if isempty(obj.Cache.Header)
        obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
      end
      header = obj.Cache.Header;
    end
    
    function set.Header(obj, header)
      %set.Header Set the value for property Header
      validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'MapObject', 'Header');
      
      obj.JavaMessage.setHeader(header.getJavaObject);
      
      % Update cache if necessary
      if ~isempty(obj.Cache.Header)
        obj.Cache.Header.setJavaObject(header.getJavaObject);
      end
    end
    
    function id = get.Id(obj)
      %get.Id Get the value for property Id
      id = typecast(int32(obj.JavaMessage.getId), 'uint32');
    end
    
    function set.Id(obj, id)
      %set.Id Set the value for property Id
      validateattributes(id, {'numeric'}, {'nonempty', 'scalar'}, 'MapObject', 'Id');
      
      obj.JavaMessage.setId(id);
    end
    
    function label = get.Label(obj)
      %get.Label Get the value for property Label
      label = typecast(int32(obj.JavaMessage.getLabel), 'uint32');
    end
    
    function set.Label(obj, label)
      %set.Label Set the value for property Label
      validateattributes(label, {'numeric'}, {'nonempty', 'scalar'}, 'MapObject', 'Label');
      
      obj.JavaMessage.setLabel(label);
    end
    
    function shape = get.Shape(obj)
      %get.Shape Get the value for property Shape
      shape = typecast(int32(obj.JavaMessage.getShape), 'uint32');
    end
    
    function set.Shape(obj, shape)
      %set.Shape Set the value for property Shape
      validateattributes(shape, {'numeric'}, {'nonempty', 'scalar'}, 'MapObject', 'Shape');
      
      obj.JavaMessage.setShape(shape);
    end
    
    function pose = get.Pose(obj)
      %get.Pose Get the value for property Pose
      if isempty(obj.Cache.Pose)
        obj.Cache.Pose = feval(obj.GeometryMsgsPoseClass, obj.JavaMessage.getPose);
      end
      pose = obj.Cache.Pose;
    end
    
    function set.Pose(obj, pose)
      %set.Pose Set the value for property Pose
      validateattributes(pose, {obj.GeometryMsgsPoseClass}, {'nonempty', 'scalar'}, 'MapObject', 'Pose');
      
      obj.JavaMessage.setPose(pose.getJavaObject);
      
      % Update cache if necessary
      if ~isempty(obj.Cache.Pose)
        obj.Cache.Pose.setJavaObject(pose.getJavaObject);
      end
    end
    
    function scale = get.Scale(obj)
      %get.Scale Get the value for property Scale
      if isempty(obj.Cache.Scale)
        obj.Cache.Scale = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getScale);
      end
      scale = obj.Cache.Scale;
    end
    
    function set.Scale(obj, scale)
      %set.Scale Set the value for property Scale
      validateattributes(scale, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'MapObject', 'Scale');
      
      obj.JavaMessage.setScale(scale.getJavaObject);
      
      % Update cache if necessary
      if ~isempty(obj.Cache.Scale)
        obj.Cache.Scale.setJavaObject(scale.getJavaObject);
      end
    end
    
    function geometry = get.Geometry(obj)
      %get.Geometry Get the value for property Geometry
      if isempty(obj.Cache.Geometry)
        obj.Cache.Geometry = feval(obj.ShapeMsgsMeshClass, obj.JavaMessage.getGeometry);
      end
      geometry = obj.Cache.Geometry;
    end
    
    function set.Geometry(obj, geometry)
      %set.Geometry Set the value for property Geometry
      validateattributes(geometry, {obj.ShapeMsgsMeshClass}, {'nonempty', 'scalar'}, 'MapObject', 'Geometry');
      
      obj.JavaMessage.setGeometry(geometry.getJavaObject);
      
      % Update cache if necessary
      if ~isempty(obj.Cache.Geometry)
        obj.Cache.Geometry.setJavaObject(geometry.getJavaObject);
      end
    end
    
    function parent = get.Parent(obj)
      %get.Parent Get the value for property Parent
      parent = typecast(int32(obj.JavaMessage.getParent), 'uint32');
    end
    
    function set.Parent(obj, parent)
      %set.Parent Set the value for property Parent
      validateattributes(parent, {'numeric'}, {'nonempty', 'scalar'}, 'MapObject', 'Parent');
      
      obj.JavaMessage.setParent(parent);
    end
    
    function param = get.Param(obj)
      %get.Param Get the value for property Param
      javaArray = obj.JavaMessage.getParam;
      array = obj.readJavaArray(javaArray, 'single');
      param = single(array);
    end
    
    function set.Param(obj, param)
      %set.Param Set the value for property Param
      validateattributes(param, {'numeric'}, {'vector', 'numel', 3}, 'MapObject', 'Param');
      
      javaArray = obj.JavaMessage.getParam;
      array = obj.writeJavaArray(param, javaArray, 'single');
      obj.JavaMessage.setParam(array);
    end
    
    function child = get.Child(obj)
      %get.Child Get the value for property Child
      javaArray = obj.JavaMessage.getChild;
      array = obj.readJavaArray(javaArray, 'uint32');
      child = uint32(array);
    end
    
    function set.Child(obj, child)
      %set.Child Set the value for property Child
      if ~isvector(child) && isempty(child)
        % Allow empty [] input
        child = uint32.empty(0,1);
      end
      
      validateattributes(child, {'numeric'}, {'vector'}, 'MapObject', 'Child');
      
      javaArray = obj.JavaMessage.getChild;
      array = obj.writeJavaArray(child, javaArray, 'uint32');
      obj.JavaMessage.setChild(array);
    end
  end
  
  methods (Access = protected)
    function resetCache(obj)
      %resetCache Resets any cached properties
      obj.Cache.Header = [];
      obj.Cache.Pose = [];
      obj.Cache.Scale = [];
      obj.Cache.Geometry = [];
    end
    
    function cpObj = copyElement(obj)
      %copyElement Implements deep copy behavior for message
      
      % Call default copy method for shallow copy
      cpObj = copyElement@robotics.ros.Message(obj);
      
      % Clear any existing cached properties
      cpObj.resetCache;
      
      % Create a new Java message object
      cpObj.JavaMessage = obj.createNewJavaMessage;
      
      % Iterate over all primitive properties
      cpObj.Id = obj.Id;
      cpObj.Label = obj.Label;
      cpObj.Shape = obj.Shape;
      cpObj.Parent = obj.Parent;
      cpObj.Param = obj.Param;
      cpObj.Child = obj.Child;
      
      % Recursively copy compound properties
      cpObj.Header = copy(obj.Header);
      cpObj.Pose = copy(obj.Pose);
      cpObj.Scale = copy(obj.Scale);
      cpObj.Geometry = copy(obj.Geometry);
    end
    
    function reload(obj, strObj)
      %reload Called by loadobj to assign properties
      obj.Id = strObj.Id;
      obj.Label = strObj.Label;
      obj.Shape = strObj.Shape;
      obj.Parent = strObj.Parent;
      obj.Param = strObj.Param;
      obj.Child = strObj.Child;
      obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
      obj.Pose = feval([obj.GeometryMsgsPoseClass '.loadobj'], strObj.Pose);
      obj.Scale = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.Scale);
      obj.Geometry = feval([obj.ShapeMsgsMeshClass '.loadobj'], strObj.Geometry);
    end
  end
  
  methods (Access = ?robotics.ros.Message)
    function strObj = saveobj(obj)
      %saveobj Implements saving of message to MAT file
      
      % Return an empty element if object array is empty
      if isempty(obj)
        strObj = struct.empty;
        return
      end
      
      strObj.Id = obj.Id;
      strObj.Label = obj.Label;
      strObj.Shape = obj.Shape;
      strObj.Parent = obj.Parent;
      strObj.Param = obj.Param;
      strObj.Child = obj.Child;
      strObj.Header = saveobj(obj.Header);
      strObj.Pose = saveobj(obj.Pose);
      strObj.Scale = saveobj(obj.Scale);
      strObj.Geometry = saveobj(obj.Geometry);
    end
  end
  
  methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
    function obj = loadobj(strObj)
      %loadobj Implements loading of message from MAT file
      
      % Return an empty object array if the structure element is not defined
      if isempty(strObj)
        obj = robotics.ros.custom.msggen.trimbot_msgs.MapObject.empty(0,1);
        return
      end
      
      % Create an empty message object
      obj = robotics.ros.custom.msggen.trimbot_msgs.MapObject;
      obj.reload(strObj);
    end
  end
end
