classdef MeshEx < robotics.ros.Message
  %MeshEx MATLAB implementation of trimbot_msgs/MeshEx
  %   This class was automatically generated by
  %   robotics.ros.msg.internal.gen.MessageClassGenerator.
  
  %   Copyright 2014-2019 The MathWorks, Inc.
  
  %#ok<*INUSD>
  
  properties (Constant)
    MessageType = 'trimbot_msgs/MeshEx' % The ROS message type
  end
  
  properties (Constant, Hidden)
    MD5Checksum = 'a1b96085430f962549e0c68faa9883ff' % The MD5 Checksum of the message definition
  end
  
  properties (Access = protected)
    JavaMessage % The Java message object
  end
  
  properties (Constant, Access = protected)
    GeometryMsgsVector3Class = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
    StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
  end
  
  properties (Dependent)
    Header
    Id
    Vcov
    Tcolor
    Tlabel
    Tshape
  end
  
  properties (Access = protected)
    Cache = struct('Header', [], 'Tcolor', []) % The cache for fast data access
  end
  
  properties (Constant, Hidden)
    PropertyList = {'Header', 'Id', 'Tcolor', 'Tlabel', 'Tshape', 'Vcov'} % List of non-constant message properties
    ROSPropertyList = {'header', 'id', 'tcolor', 'tlabel', 'tshape', 'vcov'} % List of non-constant ROS message properties
  end
  
  methods
    function obj = MeshEx(msg)
      %MeshEx Construct the message object MeshEx
      import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
      
      % Support default constructor
      if nargin == 0
        obj.JavaMessage = obj.createNewJavaMessage;
        return;
      end
      
      % Construct appropriate empty array
      if isempty(msg)
        obj = obj.empty(0,1);
        return;
      end
      
      % Make scalar construction fast
      if isscalar(msg)
        % Check for correct input class
        if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
          error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
            char(MessageInfo.getType(msg(1))) ));
        end
        obj.JavaMessage = msg(1);
        return;
      end
      
      % Check that this is a vector of scalar messages. Since this
      % is an object array, use arrayfun to verify.
      if ~all(arrayfun(@isscalar, msg))
        error(message('robotics:ros:message:MessageArraySizeError'));
      end
      
      % Check that all messages in the array have the correct type
      if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
        error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
      end
      
      % Construct array of objects if necessary
      objType = class(obj);
      for i = 1:length(msg)
        obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
      end
    end
    
    function header = get.Header(obj)
      %get.Header Get the value for property Header
      if isempty(obj.Cache.Header)
        obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
      end
      header = obj.Cache.Header;
    end
    
    function set.Header(obj, header)
      %set.Header Set the value for property Header
      validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'MeshEx', 'Header');
      
      obj.JavaMessage.setHeader(header.getJavaObject);
      
      % Update cache if necessary
      if ~isempty(obj.Cache.Header)
        obj.Cache.Header.setJavaObject(header.getJavaObject);
      end
    end
    
    function id = get.Id(obj)
      %get.Id Get the value for property Id
      id = typecast(int32(obj.JavaMessage.getId), 'uint32');
    end
    
    function set.Id(obj, id)
      %set.Id Set the value for property Id
      validateattributes(id, {'numeric'}, {'nonempty', 'scalar'}, 'MeshEx', 'Id');
      
      obj.JavaMessage.setId(id);
    end
    
    function vcov = get.Vcov(obj)
      %get.Vcov Get the value for property Vcov
      javaArray = obj.JavaMessage.getVcov;
      array = obj.readJavaArray(javaArray, 'single');
      vcov = single(array);
    end
    
    function set.Vcov(obj, vcov)
      %set.Vcov Set the value for property Vcov
      if ~isvector(vcov) && isempty(vcov)
        % Allow empty [] input
        vcov = single.empty(0,1);
      end
      
      validateattributes(vcov, {'numeric'}, {'vector'}, 'MeshEx', 'Vcov');
      
      javaArray = obj.JavaMessage.getVcov;
      array = obj.writeJavaArray(vcov, javaArray, 'single');
      obj.JavaMessage.setVcov(array);
    end
    
    function tcolor = get.Tcolor(obj)
      %get.Tcolor Get the value for property Tcolor
      if isempty(obj.Cache.Tcolor)
        javaArray = obj.JavaMessage.getTcolor;
        array = obj.readJavaArray(javaArray, obj.GeometryMsgsVector3Class);
        obj.Cache.Tcolor = feval(obj.GeometryMsgsVector3Class, array);
      end
      tcolor = obj.Cache.Tcolor;
    end
    
    function set.Tcolor(obj, tcolor)
      %set.Tcolor Set the value for property Tcolor
      if ~isvector(tcolor) && isempty(tcolor)
        % Allow empty [] input
        tcolor = feval([obj.GeometryMsgsVector3Class '.empty'], 0, 1);
      end
      
      validateattributes(tcolor, {obj.GeometryMsgsVector3Class}, {'vector'}, 'MeshEx', 'Tcolor');
      
      javaArray = obj.JavaMessage.getTcolor;
      array = obj.writeJavaArray(tcolor, javaArray, obj.GeometryMsgsVector3Class);
      obj.JavaMessage.setTcolor(array);
      
      % Update cache if necessary
      if ~isempty(obj.Cache.Tcolor)
        obj.Cache.Tcolor = [];
        obj.Cache.Tcolor = obj.Tcolor;
      end
    end
    
    function tlabel = get.Tlabel(obj)
      %get.Tlabel Get the value for property Tlabel
      javaArray = obj.JavaMessage.getTlabel;
      array = obj.readJavaArray(javaArray, 'uint32');
      tlabel = uint32(array);
    end
    
    function set.Tlabel(obj, tlabel)
      %set.Tlabel Set the value for property Tlabel
      if ~isvector(tlabel) && isempty(tlabel)
        % Allow empty [] input
        tlabel = uint32.empty(0,1);
      end
      
      validateattributes(tlabel, {'numeric'}, {'vector'}, 'MeshEx', 'Tlabel');
      
      javaArray = obj.JavaMessage.getTlabel;
      array = obj.writeJavaArray(tlabel, javaArray, 'uint32');
      obj.JavaMessage.setTlabel(array);
    end
    
    function tshape = get.Tshape(obj)
      %get.Tshape Get the value for property Tshape
      javaArray = obj.JavaMessage.getTshape;
      array = obj.readJavaArray(javaArray, 'uint32');
      tshape = uint32(array);
    end
    
    function set.Tshape(obj, tshape)
      %set.Tshape Set the value for property Tshape
      if ~isvector(tshape) && isempty(tshape)
        % Allow empty [] input
        tshape = uint32.empty(0,1);
      end
      
      validateattributes(tshape, {'numeric'}, {'vector'}, 'MeshEx', 'Tshape');
      
      javaArray = obj.JavaMessage.getTshape;
      array = obj.writeJavaArray(tshape, javaArray, 'uint32');
      obj.JavaMessage.setTshape(array);
    end
  end
  
  methods (Access = protected)
    function resetCache(obj)
      %resetCache Resets any cached properties
      obj.Cache.Header = [];
      obj.Cache.Tcolor = [];
    end
    
    function cpObj = copyElement(obj)
      %copyElement Implements deep copy behavior for message
      
      % Call default copy method for shallow copy
      cpObj = copyElement@robotics.ros.Message(obj);
      
      % Clear any existing cached properties
      cpObj.resetCache;
      
      % Create a new Java message object
      cpObj.JavaMessage = obj.createNewJavaMessage;
      
      % Iterate over all primitive properties
      cpObj.Id = obj.Id;
      cpObj.Vcov = obj.Vcov;
      cpObj.Tlabel = obj.Tlabel;
      cpObj.Tshape = obj.Tshape;
      
      % Recursively copy compound properties
      cpObj.Header = copy(obj.Header);
      cpObj.Tcolor = copy(obj.Tcolor);
    end
    
    function reload(obj, strObj)
      %reload Called by loadobj to assign properties
      obj.Id = strObj.Id;
      obj.Vcov = strObj.Vcov;
      obj.Tlabel = strObj.Tlabel;
      obj.Tshape = strObj.Tshape;
      obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
      TcolorCell = arrayfun(@(x) feval([obj.GeometryMsgsVector3Class '.loadobj'], x), strObj.Tcolor, 'UniformOutput', false);
      obj.Tcolor = vertcat(TcolorCell{:});
    end
  end
  
  methods (Access = ?robotics.ros.Message)
    function strObj = saveobj(obj)
      %saveobj Implements saving of message to MAT file
      
      % Return an empty element if object array is empty
      if isempty(obj)
        strObj = struct.empty;
        return
      end
      
      strObj.Id = obj.Id;
      strObj.Vcov = obj.Vcov;
      strObj.Tlabel = obj.Tlabel;
      strObj.Tshape = obj.Tshape;
      strObj.Header = saveobj(obj.Header);
      strObj.Tcolor = arrayfun(@(x) saveobj(x), obj.Tcolor);
    end
  end
  
  methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
    function obj = loadobj(strObj)
      %loadobj Implements loading of message from MAT file
      
      % Return an empty object array if the structure element is not defined
      if isempty(strObj)
        obj = robotics.ros.custom.msggen.trimbot_msgs.MeshEx.empty(0,1);
        return
      end
      
      % Create an empty message object
      obj = robotics.ros.custom.msggen.trimbot_msgs.MeshEx;
      obj.reload(strObj);
    end
  end
end
